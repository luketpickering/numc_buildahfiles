#!/bin/bash

if ! echo "${BASH_SOURCE}" | grep "/" --silent; then
  BB_ROOT=$(readlink -f $PWD)
else
  BB_ROOT=$(readlink -f ${BASH_SOURCE%/*})
fi

export BB_ROOT
export BUILDAH_FORMAT=docker

source $BB_ROOT/common.funcs

function resolve_deps {
    local DEPFILE=$1
    echo "Resolving dependencies found in: \"${DEPFILE}\""
    while IFS="" read -r p || [ -n "$p" ]; do
        local SANIT_LINE=$(echo $p | sed "s/^[[:space:]]\+/X/g" | sed "s/[[:space:]]\{2,\}/X/g" | grep -v "^#")

        # Skip comments
        if [ -z "${SANIT_LINE}" ]; then
          continue
        fi

        local OLDIFS=${IFS}
        local IFS=" "
        set -- $SANIT_LINE
        local NAME=$1
        local ROOT_IT=$2
        local VERS=$3
        if [ -z $VERS ]; then
            VERS=default
        fi

        local IFS=:
        set -- $NAME
        local NAME_IMAGE=$1
        local NAME_TAG=$2

        set -- $ROOT_IT
        local ROOT_IMAGE=$1
        local ROOT_TAG=$2

        local IFS=${OLDIFS}

        echo "Attempt to build dependency:"
        echo -e "\timage     : \"${NAME_IMAGE}:${NAME_TAG}\""
        echo -e "\troot-image: \"${ROOT_IMAGE}:${ROOT_TAG}\""
        echo -e "\tversion   : \"${VERS}\""

        if ! build ${NAME_IMAGE} ${ROOT_IMAGE}:${ROOT_TAG} ${VERS} ${NAME_TAG}; then
          return 1
        fi

        # This check includes the repo name, to ensure that the dependency is fulfilled
        if ! podman image exists ${NAME_IMAGE}:${NAME_TAG}; then
          echo "After building: \"${NAME_IMAGE}:${NAME_TAG}\" does not exist. Something went wrong."
          local NONREPO_INAME=${NAME_IMAGE}
          if [ ! "${NAME_IMAGE%%/*}" = "${NAME_IMAGE##*/}" ]; then
              NONREPO_INAME=${NAME_IMAGE##*/}
          fi
          if podman image exists ${NONREPO_INAME}:${NAME_TAG}; then
            echo "But: \"${NONREPO_INAME}:${NAME_TAG}\" does. Does \"$BB_ROOT/$NAME/$VERS/$ROOT_IMAGE/$ROOT_TAG/build.ah ${TAG}\" definitely set the name correctly?"
            continue
          fi
          return 1
        fi
    done < ${DEPFILE}
}

function build {
    local NAME=$1
    local ROOT_IT=$2
    local VERS=$3
    local TAG=$4
    
    local OLDIFS=${IFS}
    local IFS=:
    set -- $ROOT_IT
    local IFS=${OLDIFS}
    local ROOT_IMAGE=$1
    local ROOT_TAG=$2
    if [ -z $ROOT_TAG ]; then
        ROOT_TAG=latest
    fi

    if [ -z $TAG ]; then
        TAG=latest
    fi

    if podman image exists ${NAME}:${TAG}; then
        echo "Not rebuilding: \"${NAME}:${TAG}\""
        return 0
    fi

    local NONREPO_INAME=${NAME}
    if [ ! "${NAME%%/*}" = "${NAME##*/}" ]; then
        NONREPO_INAME=${NAME##*/}
    fi

    if ! check_exists $NONREPO_INAME $ROOT_IT $VERS; then
      return 1
    fi

    if [ -e $BB_ROOT/$NAME/$VERS/$ROOT_IMAGE/$ROOT_TAG/depends.on ]; then
        if ! resolve_deps $BB_ROOT/$NAME/$VERS/$ROOT_IMAGE/$ROOT_TAG/depends.on; then
          echo "Failed to resolve dependencies of \"$NAME\" (v: $VERS) rooted on: \"$ROOT_IMAGE:$ROOT_TAG\""
          return 1
        fi
    fi

    trap " echo 'Recieved SIGINT' " SIGINT
    echo "Running: \"$BB_ROOT/$NAME/$VERS/$ROOT_IMAGE/$ROOT_TAG/build.ah ${TAG}\""
    if ! $BB_ROOT/$NAME/$VERS/$ROOT_IMAGE/$ROOT_TAG/build.ah ${TAG}; then
      echo "Failed building $NAME:${TAG}"
      exit 1
    fi
    echo "Built: $NAME:${TAG}"
}

NAME=$1
if [ -z $NAME ]; then
  echo "Must specify a name for the container to build."
  exit 1
fi
ROOT_IT=$2
if [ -z $ROOT_IT ]; then
  echo "Must specify a root image name for the new container structure."
  exit 1
fi
VERS=$3
if [ -z $VERS ]; then
    VERS=default
fi

build $NAME $ROOT_IT $VERS